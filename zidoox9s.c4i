<devicedata>
    <creator>Zach Baylin</creator>
    <manufacturer>Zidoo</manufacturer>
    <name>Zidoo X9S</name>
    <model>X9S</model>
    <created>07/28/2018 6:19 PM</created>
    <modified>07/28/2018 6:19 PM</modified>
    <version>1</version>
    <small>devices_sm\c4.gif</small>
    <large>devices_lg\c4.gif</large>
    <control>lua_gen</control>
    <controlmethod>ip</controlmethod>
    <driver>DriverWorks</driver>
    <search_type>c4:av_gen</search_type>
    <proxies qty="1">
        <proxy primary="True" proxybindingid="5001">media_player</proxy>
    </proxies>
    <connections>
      <connection proxybindingid="5001">
				<id>2000</id>
				<facing>6</facing>
				<connectionname>OUTPUT</connectionname>
				<type>5</type>
				<consumer>False</consumer>
				<audiosource>False</audiosource>
				<videosource>True</videosource>
				<linelevel>True</linelevel>
				<classes>
					<class>
						<classname>VGA</classname>
					</class>
					<class>
						<classname>HDMI</classname>
					</class>
					<class>
						<classname>DVI</classname>
					</class>
					<class>
						<classname>SVIDEO</classname>
					</class>
					<class>
						<classname>COMPOSITE</classname>
					</class>
					<class>
						<classname>COMPONENT</classname>
					</class>
				</classes>
			</connection>
			<connection proxybindingid="5001">
				<id>4000</id>
				<facing>6</facing>
				<connectionname>OUTPUT</connectionname>
				<type>6</type>
				<consumer>False</consumer>
				<audiosource>True</audiosource>
				<videosource>False</videosource>
				<linelevel>True</linelevel>
				<classes>
					<class>
						<classname>DIGITAL_COAX</classname>
					</class>
					<class>
						<classname>DIGITAL_OPTICAL</classname>
					</class>
					<class>
						<classname>STEREO</classname>
					</class>
				</classes>
			</connection>
			<connection>
				<id>5001</id>
				<facing>6</facing>
				<connectionname>MEDIA_PLAYER</connectionname>
				<type>2</type>
				<consumer>False</consumer>
				<audiosource>False</audiosource>
				<videosource>True</videosource>
				<linelevel>False</linelevel>
				<classes>
					<class>
						<classname>MEDIA_PLAYER</classname>
					</class>
				</classes>
    </connection>
		<connection>
      <id>6001</id>
      <facing>6</facing>
      <connectionname>Zidoo IP Connection</connectionname>
      <type>4</type>
      <consumer>True</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>TCP</classname>
          <ports>
            <port>
              <number>9529</number>
              <auto_connect>True</auto_connect>
              <monitor_connection>True</monitor_connection>
              <keep_connection>True</keep_connection>
            </port>
          </ports>
        </class>
      </classes>
    </connection>
		<connection proxybindingid="5001">
      <id>7000</id>
      <facing>6</facing>
      <connectionname>Room Selection - OUTPUT</connectionname>
      <type>7</type>
      <consumer>False</consumer>
      <audiosource>True</audiosource>
      <videosource>True</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>VIDEO_SELECTION</classname>
        </class>
        <class>
          <classname>AUDIO_VOLUME</classname>
        </class>
        <class>
          <classname>AUDIO_SELECTION</classname>
        </class>
      </classes>
    </connection>
    </connections>
    <config>
        <power_management_method>AlwaysOn</power_management_method>
        <power_command_delay>0</power_command_delay>
        <power_delay>0</power_delay>
        <power_command_needed>False</power_command_needed>
        <documentation>
This is a driver for the Zidoo X9S (and probably other Zidoo boxes), written by Zach Baylin (zachbayl.in).
It is only a controller driver, unlike the one provided by Zidoo, which integrates into ZIUI.

This driver utilizes the HTTP API provided by Zidoo.
For a list of actions/keys in this driver, go to this link: https://www.zidoo.tv/Support/developer.html

The keymap is pretty much a direct map of the keys mentioned, leaving out the Mute and Volume keys so that they may be handled by the Receiver.
        </documentation>
        <script><![CDATA[
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Driver Declarations
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
	Command Handler Tables
--]]
EX_CMD = {}
PRX_CMD = {}
NOTIFY = {}
DEV_MSG = {}
LUA_ACTION = {}

--[[
Tables of functions
The following tables are function containers that are called within the following functions:	

	OnDriverInit()
		- first calls all functions contained within ON_DRIVER_EARLY_INIT table
		- then calls all functions contained within ON_DRIVER_INIT table
	OnDriverLateInit()
		- calls all functions contained within ON_DRIVER_LATEINIT table
	OnDriverUpdate()
		- calls all functions contained within ON_DRIVER_UPDATE table
	OnDriverDestroyed()
		- calls all functions contained within ON_DRIVER_DESTROYED table
	OnPropertyChanged()
		- calls all functions contained within ON_PROPERTY_CHANGED table
--]]
ON_DRIVER_INIT = {}
ON_DRIVER_EARLY_INIT = {}
ON_DRIVER_LATEINIT = {}
ON_DRIVER_UPDATE = {}
ON_DRIVER_DESTROYED = {}
ON_PROPERTY_CHANGED = {}

-- Constants
DEFAULT_PROXY_BINDINGID = 5001
	  
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Common Driver Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
	OnPropertyChanged
		Function called by Director when a property changes value.
	Parameters
		sProperty
			Name of property that has changed.
	Remarks
		The value of the property that has changed can be found with: Properties[sName]. Note
		that OnPropertyChanged is not called when the Property has been changed by the driver
		calling the UpdateProperty command, only when the Property is changed by the user from
		the Properties Page. This function is called by Director when a property changes value.
--]]


---------------------------------------------------------------------
-- ExecuteCommand Code
---------------------------------------------------------------------
--[[
	ExecuteCommand
		Function called by Director when a command is received for this DriverWorks driver.
		This includes commands created in Composer programming.
	Parameters
		sCommand
			Command to be sent
		tParams
			Lua table of parameters for the sent command
--]]
function ExecuteCommand(sCommand, tParams)
	Dbg:Trace("ExecuteCommand(" .. sCommand .. ")")
	Dbg:Info(tParams)

	-- Remove any spaces (trim the command)
	local trimmedCommand = string.gsub(sCommand, " ", "")

	-- if function exists then execute (non-stripped)
	if (EX_CMD[sCommand] ~= nil and type(EX_CMD[sCommand]) == "function") then
		EX_CMD[sCommand](tParams)
	-- elseif trimmed function exists then execute
	elseif (EX_CMD[trimmedCommand] ~= nil and type(EX_CMD[trimmedCommand]) == "function") then
		EX_CMD[trimmedCommand](tParams)
	-- handle the command
	elseif (EX_CMD[sCommand] ~= nil) then
		QueueCommand(EX_CMD[sCommand])
	else
		Dbg:Alert("ExecuteCommand: Unhandled command = " .. sCommand)
	end
end

--[[
	Define any functions of commands (EX_CMD.<command>) received from ExecuteCommand that need to be handled by the driver.
--]]

--[[
	EX_CMD.LUA_ACTION
		Function called for any actions executed by the user from the Actions Tab in Composer.
--]]
function EX_CMD.LUA_ACTION(tParams)
	if tParams ~= nil then
		for cmd,cmdv in pairs(tParams) do
			if cmd == "ACTION" then
				if (LUA_ACTION[cmdv] ~= nil) then
					LUA_ACTION[cmdv]()
				else
					Dbg:Alert("Undefined Action")
					Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
				end
			else
				Dbg:Alert("Undefined Command")
				Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
			end
		end
	end
end

--[[
	LUA_ACTION.DisplayGlobals
		Implementation of Action "Display Globals". Executed when selecting the "Display Globals" action within Composer.
		Provided as an example for actions.
--]]
function LUA_ACTION.DisplayGlobals()
	print ("Global Variables")
	print ("----------------------------")

	for k,v in pairs(_G) do	-- globals`
		if not (type(v) == "function") then
			--print(k .. ":  " .. tostring(v))
			if (string.find(k, "^g%L")  == 1) then
				print(k .. ":  " .. tostring(v))
				if (type(v) == "table") then
					PrintTable(v, "   ")
				end
			end
		end
	end

	print ("")
end

function PrintTable(tValue, sIndent)
	sIndent = sIndent or "   "
	for k,v in pairs(tValue) do
		print(sIndent .. tostring(k) .. ":  " .. tostring(v))
		if (type(v) == "table") then
			PrintTable(v, sIndent .. "   ")
		end
	end
end

---------------------------------------------------------------------
-- ReceivedFromProxy Code
---------------------------------------------------------------------
--[[
	ReceivedFromProxy(idBinding, sCommand, tParams)
		Function called by Director when a proxy bound to the specified binding sends a
		BindMessage to the DriverWorks driver.

	Parameters
		idBinding
			Binding ID of the proxy that sent a BindMessage to the DriverWorks driver.
		sCommand
			Command that was sent
		tParams
			Lua table of received command parameters
--]]

---------------------------------------------------------------------
-- Notification Code
---------------------------------------------------------------------
-- notify with parameters
function SendNotify(notifyText, Parms, bindingID)
	C4:SendToProxy(bindingID, notifyText, Parms, "NOTIFY")
end

-- A notify with no parameters
function SendSimpleNotify(notifyText, ...)
	bindingID = select(1, ...) or DEFAULT_PROXY_BINDINGID
	C4:SendToProxy(bindingID, notifyText, {}, "NOTIFY")
end

---------------------------------------------------------------------
-- Initialization/Destructor Code
---------------------------------------------------------------------
--[[
	OnDriverInit
		Invoked by director when a driver is loaded. This API is provided for the driver developer to contain all of the driver
		objects that will require initialization.
--]]
function OnDriverInit()
	C4:ErrorLog("INIT_CODE: OnDriverInit()")
	-- Call all ON_DRIVER_EARLY_INIT functions.
	for k,v in pairs(ON_DRIVER_EARLY_INIT) do
		if (ON_DRIVER_EARLY_INIT[k] ~= nil and type(ON_DRIVER_EARLY_INIT[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_EARLY_INIT." .. k .. "()")
			ON_DRIVER_EARLY_INIT[k]()
		end
	end

	-- Call all ON_DRIVER_INIT functions
	for k,v in pairs(ON_DRIVER_INIT) do
		if (ON_DRIVER_INIT[k] ~= nil and type(ON_DRIVER_INIT[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_INIT." .. k .. "()")
			ON_DRIVER_INIT[k]()
		end
	end

	-- Fire OnPropertyChanged to set the initial Headers and other Property global sets, they'll change if Property is changed.
	for k,v in pairs(Properties) do
		OnPropertyChanged(k)
	end
end

--[[
	OnDriverUpdate
		Invoked by director when an update to a driver is requested. This request can occur either by adding a new version of a driver
		through the driver search list or right clicking on the driver and selecting "Update Driver" from within ComposerPro.
		Its purpose is to initialize all components of the driver that are reset during a driver update.
--]]
function OnDriverUpdate()
	C4:ErrorLog("INIT_CODE: OnDriverUpdate()")
	
	-- Call all ON_DRIVER_UPDATE functions
	for k,v in pairs(ON_DRIVER_UPDATE) do
		if (ON_DRIVER_UPDATE[k] ~= nil and type(ON_DRIVER_UPDATE[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_UPDATE." .. k .. "()")
			ON_DRIVER_UPDATE[k]()
		end
	end
end

--[[
	OnDriverLateInit
		Invoked by director after all drivers in the project have been loaded. This API is provided
		for the driver developer to contain all of the driver objects that will require initialization
		after all drivers in the project have been loaded.
--]]
function OnDriverLateInit()
	C4:ErrorLog("INIT_CODE: OnDriverLateInit()")
	
	-- Call all ON_DRIVER_LATEINIT functions
	for k,v in pairs(ON_DRIVER_LATEINIT) do
		if (ON_DRIVER_LATEINIT[k] ~= nil and type(ON_DRIVER_LATEINIT[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_LATEINIT." .. k .. "()")
			ON_DRIVER_LATEINIT[k]()
		end
	end
end


--[[
	OnDriverDestroyed
		Function called by Director when a driver is removed. Release things this driver has allocated such as timers.
--]]
function OnDriverDestroyed()
	C4:ErrorLog("INIT_CODE: OnDriverDestroyed()")
	-- Call all ON_DRIVER_DESTROYED functions
	for k,v in pairs(ON_DRIVER_DESTROYED) do
		if (ON_DRIVER_DESTROYED[k] ~= nil and type(ON_DRIVER_DESTROYED[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_DESTROYED." .. k .. "()")
			ON_DRIVER_DESTROYED[k]()
		end
	end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Debug Logging Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Log = {}

-- Create a Table with Logging functions
function Log:Create()
	
	-- table for logging functions
	local lt = {}
	
	lt._logLevel = 0
	lt._outputPrint = false
	lt._outputC4Log = false
	lt._logName =  "Set Log Name to display"
	
	function lt:SetLogLevel(level)
		self._logLevel = level
	end
	
	function lt:OutputPrint(value)
		self._outputPrint = value
	end
	
	function lt:OutputC4Log(value)
		self._outputC4Log = value
	end
	
	function lt:SetLogName(name)
		self._logName = name
	end

	function lt:Enabled()
		return (self._outputPrint or self._outputC4Log)
	end
	
	function lt:PrintTable(tValue, sIndent)
		if (type(tValue) == "table") then
			if (self._outputPrint) then
				for k,v in pairs(tValue) do
					print(sIndent .. tostring(k) .. ":  " .. tostring(v))
					if (type(v) == "table") then
						self:PrintTable(v, sIndent .. "   ")
					end
				end
			end
	
			if (self._outputC4Log) then
				for k,v in pairs(tValue) do
					C4:ErrorLog(self._logName .. ": " .. sIndent .. tostring(k) .. ":  " .. tostring(v))
					if (type(v) == "table") then
						self:PrintTable(v, sIndent .. "   ")
					end
				end
			end

		else
			if (self._outputPrint) then
				print (sIndent .. tValue)
			end
			
			if (self._outputC4Log) then
				C4:ErrorLog(self._logName .. ": " .. sIndent .. tValue)
			end
		end
	end
		
	function lt:Print(logLevel, sLogText)
		if (self._logLevel >= logLevel) then
			if (type(sLogText) == "table") then
				self:PrintTable(sLogText, "   ")
				return
			end
			
			if (self._outputPrint) then
				print (sLogText)
			end

			if (self._outputC4Log) then
				C4:ErrorLog(self._logName .. ": " .. sLogText)
			end
		end
	end
	
	function lt:Alert(strDebugText)
		self:Print(0, strDebugText)
	end
	
	function lt:Error(strDebugText)
		self:Print(1, strDebugText)
	end
	
	function lt:Warn(strDebugText)
		self:Print(2, strDebugText)
	end
	
	function lt:Info(strDebugText)
		self:Print(3, strDebugText)
	end
	
	function lt:Trace(strDebugText)
		self:Print(4, strDebugText)
	end
	
	function lt:Debug(strDebugText)
		self:Print(5, strDebugText)
	end
	
	return lt
end

function ON_DRIVER_EARLY_INIT.LogLib()
	-- Create and initialize debug logging
	Dbg = Log.Create()
	Dbg:SetLogName("base_template PLEASE CHANGE")
end

function ON_DRIVER_INIT.LogLib()
	-- Create Debug Timer
	gDebugTimer = Timer:Create("Debug", 45, "MINUTES", OnDebugTimerExpired)
end

--[[
	OnDebugTimerExpired
		Debug timer callback function
--]]
function OnDebugTimerExpired()
	Dbg:Warn("Turning Debug Mode Off (timer expired)")
	gDebugTimer:KillTimer()
	C4:UpdateProperty("Debug Mode", "Off")
	OnPropertyChanged("Debug Mode")
end
      
---------------------------------------------------------------------
-- Timer Code
---------------------------------------------------------------------
Timer = {}

-- Create a Table with Timer functions
function Timer:Create(name, interval, units, Callback, repeating, Info)
	-- timers table
	local tt = {}
	
	tt._name = name
	tt._timerID = TimerLibGetNextTimerID()
	tt._interval = interval
	tt._units = units
	tt._repeating = repeating or false
	tt._Callback = Callback
	tt._info = Info or ""
	tt._id = 0

	function tt:StartTimer(...)
		self:KillTimer()
		
		-- optional parameters (interval, units, repeating)
		if ... then
			local interval = select(1, ...)
			local units = select(2, ...)
			local repeating = select(3, ...)
			
			self._interval = interval or self._interval
			self._units = units or self._units
			self._repeating = repeating or self._repeating
		end
		
		if (self._interval > 0) then
			Dbg:Trace("Starting Timer: " .. self._name)
			self._id = C4:AddTimer(self._interval, self._units, self._repeating)
		end
	end

	function tt:KillTimer()
		if (self._id) then
			self._id = C4:KillTimer(self._id)
		end
	end
	
	function tt:TimerStarted()
		return (self._id ~= 0)
	end
			
	function tt:TimerStopped()
		return not self:TimerStarted()
	end
	
	gTimerLibTimers[tt._timerID] = tt
	Dbg:Trace("Created timer " .. tt._name)
	
	return tt
end

function TimerLibGetNextTimerID()
	gTimerLibTimerCurID = gTimerLibTimerCurID + 1
	return gTimerLibTimerCurID
end

function ON_DRIVER_EARLY_INIT.TimerLib()
	gTimerLibTimers = {}
	gTimerLibTimerCurID = 0
end

function ON_DRIVER_DESTROYED.TimerLib()
	-- Kill open timers
	for k,v in pairs(gTimerLibTimers) do
		v:KillTimer()
	end
end

--[[
	OnTimerExpired
		Function called by Director when the specified Control4 timer expires.
	Parameters
		idTimer
			Timer ID of expired timer.
--]]

sendKeyTable = {}
sendKeyTimerID = nil
sendKeyDelay = tonumber(Properties['DELAY_IN_MS'])
ZIDOO_PORT = 9529
ZIDOO_IP = Properties['DEVICE_IP']
SKIP_FWD_TIME = tonumber(Properties['SKIP_FWD_TIME'])
SKIP_REV_TIME = tonumber(Properties['SKIP_REV_TIME'])
ticketIDTable = {}

function setContains(set, key)
  return set[key] ~= nil
end


ZIDOO_KEYS = {
	["Back"] = "Key.Back",
	["Cancel"] = "Key.Cancel",
	["Home"] = "Key.Home",
	["Up"] = "Key.Up",
	["Down"] = "Key.Down",
	["Left"] = "Key.Left",
	["Right"] = "Key.Right",
	["Ok"] = "Key.Ok",
	["Select"] = "Key.Select",
	["Star"] = "Key.Star",
	["Pound"] = "Key.Pound",
	["Dash"] = "Key.Dash",
	["Menu"] = "Key.Menu",
	["MediaPlay"] = "Key.MediaPlay",
	["MediaStop"] = "Key.MediaStop",
	["MediaPause"] = "Key.MediaPause",
	["MediaNext"] = "Key.MediaNext",
	["MediaPrev"] = "Key.MediaPrev",
	["Number_0"] = "Key.Number_0",
	["Number_1"] = "Key.Number_1",
	["Number_2"] = "Key.Number_2",
	["Number_3"] = "Key.Number_3",
	["Number_4"] = "Key.Number_4",
	["Number_5"] = "Key.Number_5",
	["Number_6"] = "Key.Number_6",
	["Number_7"] = "Key.Number_7",
	["Number_8"] = "Key.Number_8",
	["Number_9"] = "Key.Number_9",
	["UserDefine_A"] = "Key.UserDefine_A",
	["UserDefine_B"] = "Key.UserDefine_B",
	["UserDefine_C"] = "Key.UserDefine_C",
	["UserDefine_D"] = "Key.UserDefine_D",
	["Mute"] = "Key.Mute",
	["VolumeUp"] = "Key.VolumeUp",
	["VolumeDown"] = "Key.VolumeDown",
	["PowerOn"] = "Key.PowerOn",
	["MediaBackward"] = "Key.MediaBackward",
	["MediaForward"] = "Key.MediaForward",
	["Info"] = "Key.Info",
	["Record"] = "Key.Record",
	["PageUP"] = "Key.PageUP",
	["PageDown"] = "Key.PageDown",
	["Subtitle"] = "Key.Subtitle",
	["Audio"] = "Key.Audio",
	["Repeat"] = "Key.Repeat",
	["PopMenu"] = "Key.PopMenu",
	["APP Switch"] = "Key.App.Switch"
}

C4_KEY_KEYMAP = {
	["RECALL"] = ZIDOO_KEYS['Back'],
	["CANCEL"] = ZIDOO_KEYS['Cancel'],
	["GUIDE"] = ZIDOO_KEYS['Home'],
	["UP"] = ZIDOO_KEYS['Up'],
	["DOWN"] = ZIDOO_KEYS['Down'],
	["LEFT"] = ZIDOO_KEYS['Left'],
	["RIGHT"] = ZIDOO_KEYS['Right'],
	["ENTER"] = ZIDOO_KEYS['Ok'],
	["STAR"] = ZIDOO_KEYS['Subtitle'],
	["POUND"] = ZIDOO_KEYS['Audio'],
	["DASH"] = ZIDOO_KEYS['Dash'],
	["MENU"] = ZIDOO_KEYS['Menu'],
	["PLAY"] = ZIDOO_KEYS['MediaPlay'],
	["STOP"] = ZIDOO_KEYS['MediaStop'],
	["PAUSE"] = ZIDOO_KEYS['MediaPause'],
	["NUMBER_0"] = ZIDOO_KEYS['Number_0'],
	["NUMBER_1"] = ZIDOO_KEYS['Number_1'],
	["NUMBER_2"] = ZIDOO_KEYS['Number_2'],
	["NUMBER_3"] = ZIDOO_KEYS['Number_3'],
	["NUMBER_4"] = ZIDOO_KEYS['Number_4'],
	["NUMBER_5"] = ZIDOO_KEYS['Number_5'],
	["NUMBER_6"] = ZIDOO_KEYS['Number_6'],
	["NUMBER_7"] = ZIDOO_KEYS['Number_7'],
	["NUMBER_8"] = ZIDOO_KEYS['Number_8'],
	["NUMBER_9"] = ZIDOO_KEYS['Number_9'],
	["PROGRAM_A"] = ZIDOO_KEYS['UserDefine_A'],
	["PROGRAM_B"] = ZIDOO_KEYS['UserDefine_B'],
	["PROGRAM_C"] = ZIDOO_KEYS['UserDefine_C'],
	["PROGRAM_D"] = ZIDOO_KEYS['UserDefine_D'],
	["SCAN_REV"] = ZIDOO_KEYS['MediaBackward'],
	["SCAN_FWD"] = ZIDOO_KEYS['MediaForward'],
	["INFO"] = ZIDOO_KEYS['Info'],
	["RECORD"] = ZIDOO_KEYS['Record'],
	["PAGE_UP"] = ZIDOO_KEYS['Page_UP'],
	["PAGE_DOWN"] = ZIDOO_KEYS['Page_Down']
}

C4_ACTION_KEYMAP = {
	["SKIP_FWD"] = function ()
		table.insert(ticketIDTable, {"SKIP_FWD", C4:urlGet(ZIDOO_IP .. ":" .. ZIDOO_PORT .. "/ZidooVideoPlay/getPlayStatus")})
	end,
	["SKIP_REV"] = function ()
		table.insert(ticketIDTable, {"SKIP_REV", C4:urlGet(ZIDOO_IP .. ":" .. ZIDOO_PORT .. "/ZidooVideoPlay/getPlayStatus")})
	end
}

POST_ACTION_MAP = {
	["SKIP_FWD"] = function (dataStr)
		local t = Decode(dataStr)
		if (t.status == 200) then
			Dbg:Info("Video is at position: " .. t.video.currentPosition .. "ms")
			local newPosition = tonumber(t.video.currentPosition) + SKIP_FWD_TIME
			Dbg:Info("Seeking to position: " .. newPosition .. "ms")
			C4:urlGet(ZIDOO_IP .. ":" .. ZIDOO_PORT .. "/ZidooVideoPlay/seekTo?positon=" .. tostring(newPosition))
		else
		  Dbg:Info("No video is currently playing.")
		end
	end,
	["SKIP_REV"] = function (dataStr)
		local t = Decode(dataStr)
		if (t.status == 200) then
			Dbg:Info("Video is at position: " .. t.video.currentPosition .. "ms")
			local newPosition = tonumber(t.video.currentPosition) - SKIP_REV_TIME
			Dbg:Info("Seeking to position: " .. newPosition .. "ms")
			C4:urlGet(ZIDOO_IP .. ":" .. ZIDOO_PORT .. "/ZidooVideoPlay/seekTo?positon=" .. tostring(newPosition))
		else
		  Dbg:Info("No video is currently playing.")
		end
	end
}

function ReceivedAsync(ticketID, dataStr, errMsg, responseCode, headersTable)
	Dbg:Info("Got information from box: " .. dataStr)
	if (ticketIDTable[1] ~= nil) then
		if (setContains(POST_ACTION_MAP, ticketIDTable[1][1])) then
			Dbg:Info("Running post action for: " .. ticketIDTable[1][1])
			POST_ACTION_MAP[ticketIDTable[1][1]](dataStr)
		end

		table.remove(ticketIDTable, 1)
	end
end

function send(key)
	Dbg:Info('Adding key to queue: ' .. key)
	
	table.insert(sendKeyTable, {key, false})
	
	if (sendKeyTimerID == nil) then
		sendKeyTimerID = C4:AddTimer(sendKeyDelay, 'MILLISECONDS', true)
	end
end

function ReceivedFromProxy(bindingID, commandStr, paramsTable)
	Dbg:Info('Received Command from Proxy: ' .. commandStr)
	Dbg:Info(C4_KEY_KEYMAP["LEFT"])
	if (setContains(C4_KEY_KEYMAP, commandStr)) then
		Dbg:Info('Command corresponds to Key: ' .. C4_KEY_KEYMAP[commandStr])
		send(C4_KEY_KEYMAP[commandStr])
	elseif (setContains(C4_ACTION_KEYMAP, commandStr)) then
		Dbg:Info('Command corresponds to Action: ' .. commandStr)
		C4_ACTION_KEYMAP[commandStr]()
	end
end

function OnTimerExpired(timerID)
	if (timerID == sendKeyTimerID) then
		if (sendKeyTable[1] ~= nil) then
			Dbg:Info('Sending key to device: ' .. sendKeyTable[1][1])
			C4:urlGet(ZIDOO_IP .. ":" .. ZIDOO_PORT .. "/ZidooControlCenter/RemoteControl/sendkey?key=" .. sendKeyTable[1][1])
			table.remove(sendKeyTable, 1)
		end
	end
end

function OnPropertyChanged(sProperty)
	Dbg:Trace("OnPropertyChanged(" .. sProperty .. ") changed to: " .. Properties[sProperty])

	local propertyValue = Properties[sProperty]
	ZIDOO_IP = Properties['DEVICE_IP']
	SKIP_FWD_TIME = tonumber(Properties['SKIP_FWD_TIME'])
	SKIP_REV_TIME = tonumber(Properties['SKIP_REV_TIME'])

	Dbg:Info("Changed DEVICE_IP: " .. ZIDOO_IP)
	
	-- Remove any spaces (trim the property)
	local trimmedProperty = string.gsub(sProperty, " ", "")

	-- if function exists then execute (non-stripped)
	if (ON_PROPERTY_CHANGED[sProperty] ~= nil and type(ON_PROPERTY_CHANGED[sProperty]) == "function") then
		ON_PROPERTY_CHANGED[sProperty](propertyValue)
		return
	-- elseif trimmed function exists then execute
	elseif (ON_PROPERTY_CHANGED[trimmedProperty] ~= nil and type(ON_PROPERTY_CHANGED[trimmedProperty]) == "function") then
		ON_PROPERTY_CHANGED[trimmedProperty](propertyValue)
		return
	end
end

function ON_PROPERTY_CHANGED.DebugMode(propertyValue)
	gDebugTimer:KillTimer()
	Dbg:OutputPrint(propertyValue:find("Print") ~= nil)
	Dbg:OutputC4Log(propertyValue:find("Log") ~= nil)
	if (propertyValue == "Off") then return end
	gDebugTimer:StartTimer()
end

function ON_PROPERTY_CHANGED.DebugLevel(propertyValue)
	Dbg:SetLogLevel(tonumber(string.sub(propertyValue, 1, 1)))
end


-- Begin JSON Library
--[[

 JSON Encoder and Parser for Lua 5.1

 Copyright ? 2007 Shaun Brown (http://www.chipmunkav.com).
 All Rights Reserved.

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.
 If you find this software useful please give www.chipmunkav.com a mention.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Usage:

 -- Lua script:
 local t = {
	["name1"] = "value1",
	["name2"] = {1, false, true, 23.54, "a \021 string"},
	name3 = Json.Null()
 }

 local json = Json.Encode (t)
 print (json)
 --> {"name1":"value1","name3":null,"name2":[1,false,true,23.54,"a \u0015 string"]}

 local t = Json.Decode(json)
 print(t.name2[4])
 --> 23.54

 Notes:
 1) Encodable Lua types: string, number, boolean, table, nil
 2) Use Json.Null() to insert a null value into a Json object
 3) All control chars are encoded to \uXXXX format eg "\021" encodes to "\u0015"
 4) All Json \uXXXX chars are decoded to chars (0-255 byte range only)
 5) Json single line // and /* */ block comments are discarded during decoding
 6) Numerically indexed Lua arrays are encoded to Json Lists eg [1,2,3]
 7) Lua dictionary tables are converted to Json objects eg {"one":1,"two":2}
 8) Json nulls are decoded to Lua nil and treated by Lua in the normal way

--]]
local string = string
local math = math
local table = table
local error = error
local tonumber = tonumber
local tostring = tostring
local type = type
local setmetatable = setmetatable
local pairs = pairs
local ipairs = ipairs
local assert = assert
local Chipmunk = Chipmunk

--module("Json")

local StringBuilder = {
	buffer = {}
}

function StringBuilder:New()
	local o = {}
	setmetatable(o, self)
	self.__index = self
	o.buffer = {}
	return o
end

function StringBuilder:Append(s)
	self.buffer[#self.buffer+1] = s
end

function StringBuilder:ToString()
	return table.concat(self.buffer)
end

local JsonWriter = {
	backslashes = {
		['\b'] = "\\b",
		['\t'] = "\\t",
		['\n'] = "\\n",
		['\f'] = "\\f",
		['\r'] = "\\r",
		['"']  = "\\\"",
		['\\'] = "\\\\",
		['/']  = "\\/"
	}
}

function JsonWriter:New()
	local o = {}
	o.writer = StringBuilder:New()
	setmetatable(o, self)
	self.__index = self
	return o
end

function JsonWriter:Append(s)
	self.writer:Append(s)
end

function JsonWriter:ToString()
	return self.writer:ToString()
end

function JsonWriter:Write(o)
	local t = type(o)
	if t == "nil" then
		self:WriteNil()
	elseif t == "boolean" then
		self:WriteString(o)
	elseif t == "number" then
		self:WriteString(o)
	elseif t == "string" then
		self:ParseString(o)
	elseif t == "table" then
		self:WriteTable(o)
	elseif t == "function" then
		self:WriteFunction(o)
	elseif t == "thread" then
		self:WriteError(o)
	elseif t == "userdata" then
		self:WriteError(o)
	end
end

function JsonWriter:WriteNil()
	self:Append("null")
end

function JsonWriter:WriteString(o)
	self:Append(tostring(o))
end

function JsonWriter:ParseString(s)
	self:Append('"')
	self:Append(string.gsub(s, "[%z%c\\\"/]", function(n)
		local c = self.backslashes[n]
		if c then return c end
		return string.format("\\u%.4X", string.byte(n))
	end))
	self:Append('"')
end

function JsonWriter:IsArray(t)
	local count = 0
	local isindex = function(k)
		if type(k) == "number" and k > 0 then
			if math.floor(k) == k then
				return true
			end
		end
		return false
	end
	for k,v in pairs(t) do
		if not isindex(k) then
			return false, '{', '}'
		else
			count = math.max(count, k)
		end
	end
	return true, '[', ']', count
end

function JsonWriter:WriteTable(t)
	local ba, st, et, n = self:IsArray(t)
	self:Append(st)
	if ba then
		for i = 1, n do
			self:Write(t[i])
			if i < n then
				self:Append(',')
			end
		end
	else
		local first = true;
		for k, v in pairs(t) do
			if not first then
				self:Append(',')
			end
			first = false;
			self:ParseString(k)
			self:Append(':')
			self:Write(v)
		end
	end
	self:Append(et)
end

function JsonWriter:WriteError(o)
	error(string.format(
		"Encoding of %s unsupported",
		tostring(o)))
end

function JsonWriter:WriteFunction(o)
	if o == Null then
		self:WriteNil()
	else
		self:WriteError(o)
	end
end

local StringReader = {
	s = "",
	i = 0
}

function StringReader:New(s)
	local o = {}
	setmetatable(o, self)
	self.__index = self
	o.s = s or o.s
	return o
end

function StringReader:Peek()
	local i = self.i + 1
	if i <= #self.s then
		return string.sub(self.s, i, i)
	end
	return nil
end

function StringReader:Next()
	self.i = self.i+1
	if self.i <= #self.s then
		return string.sub(self.s, self.i, self.i)
	end
	return nil
end

function StringReader:All()
	return self.s
end

local JsonReader = {
	escapes = {
		['t'] = '\t',
		['n'] = '\n',
		['f'] = '\f',
		['r'] = '\r',
		['b'] = '\b',
	}
}

function JsonReader:New(s)
	local o = {}
	o.reader = StringReader:New(s)
	setmetatable(o, self)
	self.__index = self
	return o;
end

function JsonReader:Read()
	self:SkipWhiteSpace()
	local peek = self:Peek()
	if peek == nil then
		error(string.format(
			"Nil string: '%s'",
			self:All()))
	elseif peek == '{' then
		return self:ReadObject()
	elseif peek == '[' then
		return self:ReadArray()
	elseif peek == '"' then
		return self:ReadString()
	elseif string.find(peek, "[%+%-%d]") then
		return self:ReadNumber()
	elseif peek == 't' then
		return self:ReadTrue()
	elseif peek == 'f' then
		return self:ReadFalse()
	elseif peek == 'n' then
		return self:ReadNull()
	elseif peek == '/' then
		self:ReadComment()
		return self:Read()
	else
		error(string.format(
			"Invalid input: '%s'",
			self:All()))
	end
end

function JsonReader:ReadTrue()
	self:TestReservedWord{'t','r','u','e'}
	return true
end

function JsonReader:ReadFalse()
	self:TestReservedWord{'f','a','l','s','e'}
	return false
end

function JsonReader:ReadNull()
	self:TestReservedWord{'n','u','l','l'}
	return nil
end

function JsonReader:TestReservedWord(t)
	for i, v in ipairs(t) do
		if self:Next() ~= v then
			 error(string.format(
				"Error reading '%s': %s",
				table.concat(t),
				self:All()))
		end
	end
end

function JsonReader:ReadNumber()
        local result = self:Next()
        local peek = self:Peek()
        while peek ~= nil and string.find(
		peek,
		"[%+%-%d%.eE]") do
            result = result .. self:Next()
            peek = self:Peek()
	end
	result = tonumber(result)
	if result == nil then
	        error(string.format(
			"Invalid number: '%s'",
			result))
	else
		return result
	end
end

function JsonReader:ReadString()
	local result = ""
	assert(self:Next() == '"')
        while self:Peek() ~= '"' do
		local ch = self:Next()
		if ch == '\\' then
			ch = self:Next()
			if self.escapes[ch] then
				ch = self.escapes[ch]
			end
		end
                result = result .. ch
	end
        assert(self:Next() == '"')
	local fromunicode = function(m)
		return string.char(tonumber(m, 16))
	end
	return string.gsub(
		result,
		"u%x%x(%x%x)",
		fromunicode)
end

function JsonReader:ReadComment()
        assert(self:Next() == '/')
        local second = self:Next()
        if second == '/' then
            self:ReadSingleLineComment()
        elseif second == '*' then
            self:ReadBlockComment()
        else
            error(string.format(
		"Invalid comment: %s",
		self:All()))
	end
end

function JsonReader:ReadBlockComment()
	local done = false
	while not done do
		local ch = self:Next()
		if ch == '*' and self:Peek() == '/' then
			done = true
                end
		if not done and
			ch == '/' and
			self:Peek() == "*" then
                    error(string.format(
			"Invalid comment: %s, '/*' illegal.",
			self:All()))
		end
	end
	self:Next()
end

function JsonReader:ReadSingleLineComment()
	local ch = self:Next()
	while ch ~= '\r' and ch ~= '\n' do
		ch = self:Next()
	end
end

function JsonReader:ReadArray()
	local result = {}
	assert(self:Next() == '[')
	local done = false
	if self:Peek() == ']' then
		done = true;
	end
	while not done do
		local item = self:Read()
		result[#result+1] = item
		self:SkipWhiteSpace()
		if self:Peek() == ']' then
			done = true
		end
		if not done then
			local ch = self:Next()
			if ch ~= ',' then
				error(string.format(
					"Invalid array: '%s' due to: '%s'",
					self:All(), ch))
			end
		end
	end
	assert(']' == self:Next())
	return result
end

function JsonReader:ReadObject()
	local result = {}
	assert(self:Next() == '{')
	local done = false
	if self:Peek() == '}' then
		done = true
	end
	while not done do
		local key = self:Read()
		if type(key) ~= "string" then
			error(string.format(
				"Invalid non-string object key: %s",
				key))
		end
		self:SkipWhiteSpace()
		local ch = self:Next()
		if ch ~= ':' then
			error(string.format(
				"Invalid object: '%s' due to: '%s'",
				self:All(),
				ch))
		end
		self:SkipWhiteSpace()
		local val = self:Read()
		result[key] = val
		self:SkipWhiteSpace()
		if self:Peek() == '}' then
			done = true
		end
		if not done then
			ch = self:Next()
                	if ch ~= ',' then
				error(string.format(
					"Invalid array: '%s' near: '%s'",
					self:All(),
					ch))
			end
		end
	end
	assert(self:Next() == "}")
	return result
end

function JsonReader:SkipWhiteSpace()
	local p = self:Peek()
	while p ~= nil and string.find(p, "[%s/]") do
		if p == '/' then
			self:ReadComment()
		else
			self:Next()
		end
		p = self:Peek()
	end
end

function JsonReader:Peek()
	return self.reader:Peek()
end

function JsonReader:Next()
	return self.reader:Next()
end

function JsonReader:All()
	return self.reader:All()
end

function Encode(o)
	local writer = JsonWriter:New()
	writer:Write(o)
	return writer:ToString()
end

function Decode(s)
	local reader = JsonReader:New(s)
	return reader:Read()
end

function Null()
	return Null
end
]]></script>
        <actions>
            <action>
                <name>Display Globals</name>
                <command>DisplayGlobals</command>
            </action>
            <action>
                <name>KEY_PRESSED</name>
                <command>KEY_PRESSED</command>
            </action>
        </actions>
        <properties>
            <property>
                <name>Debug Level</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>2 - Warning</default>
                <items>
                    <item>0 - Alert</item>
                    <item>1 - Error</item>
                    <item>2 - Warning</item>
                    <item>3 - Info</item>
                    <item>4 - Trace</item>
                    <item>5 - Debug</item>
                </items>
            </property>
            <property>
                <name>Debug Mode</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Off</default>
                <items>
                    <item>Off</item>
                    <item>Print</item>
                    <item>Log</item>
                    <item>Print and Log</item>
                </items>
            </property>
            <property>
                <name>DELAY_IN_MS</name>
                <type>STRING</type>
                <readonly>false</readonly>
                <default>10</default>
            </property>
            <property>
                <name>DEVICE_IP</name>
                <type>STRING</type>
                <readonly>false</readonly>
                <default />
            </property>
            <property>
                <name>SKIP_FWD_TIME</name>
                <type>STRING</type>
                <readonly>false</readonly>
                <default />
            </property>
            <property>
                <name>SKIP_REV_TIME</name>
                <type>STRING</type>
                <readonly>false</readonly>
                <default />
            </property>
        </properties>
    </config>
    <composer_categories>
        <category>Audio/Video</category>
    </composer_categories>
</devicedata>